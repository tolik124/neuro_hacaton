import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from keras import layers
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt



# 1. Load your dataset from the CSV file
csv_file_path = 'dataset(in).csv'
try:
    df = pd.read_csv(csv_file_path, sep=';')
    print("Data loaded successfully from CSV file")
except FileNotFoundError:
    print("Error: The CSV file was not found.")
    exit(1)

print(df.head())

# 2. Separate features and the target variable ('Win' column)
target_col = 'Win'
if target_col not in df.columns:
    print("Error: The 'Win' column was not found in the CSV file.")
    exit(1)

feature_cols = df.columns.drop(target_col)
X = df[feature_cols].values  # Get features as a NumPy array
y = df[target_col].values  # Get target variable as a NumPy array


# Min-Max Scaling
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)


# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
print("Shape of train features:", X_train.shape)
print("Shape of test features:", X_test.shape)
print("Shape of train target:", y_train.shape)
print("Shape of test target:", y_test.shape)

# 3. Keras Model Definition
input_dim = X_train.shape[1]  #Get number of features
model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(input_dim,)),
    layers.Dense(32, activation='relu'),
    layers.Dense(1, activation='sigmoid')  # Sigmoid activation for binary classification
])

# Compile the model
model.compile(optimizer='adam',
    loss='binary_crossentropy',  #Binary crossentropy
    metrics=['accuracy'])

model.summary()


# 4. Train the Model
epochs = 50
batch_size = 32

history = model.fit(X_train, y_train,
    epochs=epochs,
    batch_size=batch_size,
    validation_split=0.2,
    verbose=1)

# Print the results of each training epoch:
# Training and validation accuracy and loss
print(history.history.keys())

# Plot results
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()


# 5. Evaluate the Model
loss, accuracy = model.evaluate(X_test, y_test, verbose = 0)
print("Test Loss:", loss)
print("Test Accuracy:", accuracy)

# 6. Making Predictions
# Make predictions on test set
predictions = model.predict(X_test)

# Convert probabilities to binary predictions
predictions = (predictions > 0.5).astype(int)

# Print some predictions
print("Predictions (first 10):", predictions[:10].flatten())
print("True labels (first 10):", y_test[:10])
model.save("neiro.h5")